import{_ as s,o as a,c as e,O as n}from"./chunks/framework.6d829df7.js";const A=JSON.parse('{"title":"Actions","description":"","frontmatter":{},"headers":[],"relativePath":"concepts/actions.md"}'),o={name:"concepts/actions.md"},t=n(`<h1 id="actions" tabindex="-1">Actions <a class="header-anchor" href="#actions" aria-label="Permalink to &quot;Actions&quot;">​</a></h1><p>Actions are code bundles that perform programming tasks, configurable via a rich user interface suitable for a novice programmer. An action is comprised of a descriptor, credential requirements, schemas, and action code.</p><p>An action directory follows a structure as follows:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">/actions</span></span>
<span class="line"><span style="color:#A6ACCD;">├─ Service</span></span>
<span class="line"><span style="color:#A6ACCD;">│  ├─ Action</span></span>
<span class="line"><span style="color:#A6ACCD;">│  │ ├─ Action.js</span></span>
<span class="line"><span style="color:#A6ACCD;">│  │ ├─ Descriptor.js</span></span>
<span class="line"><span style="color:#A6ACCD;">├─ Schemas.js</span></span></code></pre></div><p>For example, a Square/GetOrders action would be:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">/actions</span></span>
<span class="line"><span style="color:#A6ACCD;">├─ Square</span></span>
<span class="line"><span style="color:#A6ACCD;">│  ├─ GetOrders</span></span>
<span class="line"><span style="color:#A6ACCD;">│  │ ├─ Action.js</span></span>
<span class="line"><span style="color:#A6ACCD;">│  │ ├─ Descriptor.js</span></span>
<span class="line"><span style="color:#A6ACCD;">├─ Schemas.js</span></span></code></pre></div><h3 id="action-js" tabindex="-1">Action.js <a class="header-anchor" href="#action-js" aria-label="Permalink to &quot;Action.js&quot;">​</a></h3><p>Action.js should inherit from ActionBase and overwrite the <code>perform</code> method. This is the code that will execute when the action is included in an app.</p><h3 id="descriptor-js" tabindex="-1">Descriptor.js <a class="header-anchor" href="#descriptor-js" aria-label="Permalink to &quot;Descriptor.js&quot;">​</a></h3><p>Descriptor.js specifies the <code>service</code>, <code>name</code>, <code>description</code>, <code>icon</code>, <code>expectedTypeName</code>, and other meta data will appear in the rule editor UI.</p><h3 id="schema-js" tabindex="-1">Schema.js <a class="header-anchor" href="#schema-js" aria-label="Permalink to &quot;Schema.js&quot;">​</a></h3><p>Definitions of the fields that will be made available in the UI via the Descriptor&#39;s <code>expectedTypeName</code>, including the Vue components that should be rendered for each attribute.</p><h3 id="selecting-an-editor-for-a-field" tabindex="-1">Selecting an Editor for a field <a class="header-anchor" href="#selecting-an-editor-for-a-field" aria-label="Permalink to &quot;Selecting an Editor for a field&quot;">​</a></h3><p>By setting the <code>editorComponent</code> and <code>editorOptions</code> on a schema attribute, we can present the user with a custom Vue component optimized for the field.</p><p>For instance, this schema produces a SQL editor for the <code>query</code> attribute:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports.</span><span style="color:#A6ACCD;">Query </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">schema</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">fields</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">query</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> String</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">required</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">example</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">\`SELECT * FROM TABLE\`</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">editorComponent</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">AceEditor</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">editorOptions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">300px</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">lang</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">sql</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>If no editorComponent is set, a single-line <code>CodeCompletingInput</code> component will be used to provide simple autocompletion and JS previews.</p><h3 id="creating-editorcomponents" tabindex="-1">Creating EditorComponents <a class="header-anchor" href="#creating-editorcomponents" aria-label="Permalink to &quot;Creating EditorComponents&quot;">​</a></h3><p>EditorComponents can be found in <code>/components/builderv2/transform-editors</code>. Clone an existing editor, and add it to <code>/components/builderv2/transform-editors/index.js</code> to make it available to your actions.</p>`,19),l=[t];function p(c,r,i,d,D,y){return a(),e("div",null,l)}const h=s(o,[["render",p]]);export{A as __pageData,h as default};
