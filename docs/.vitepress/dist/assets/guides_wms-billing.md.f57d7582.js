import{_ as s,o as n,c as e,O as a}from"./chunks/framework.6d829df7.js";const u=JSON.parse('{"title":"WMS Billing Guide","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guides/wms-billing.md"}'),o={name:"guides/wms-billing.md"},l=a(`<h1 id="wms-billing-guide" tabindex="-1">WMS Billing Guide <a class="header-anchor" href="#wms-billing-guide" aria-label="Permalink to &quot;WMS Billing Guide&quot;">​</a></h1><p>This walkthrough demonstrates how Trivial can be used as the billing engine for a WMS. It assumes the Trivial editor has already been <a href="/getting-started.html">setup</a> to deploy AWS Lambdas on save.</p><p>In this pattern, the WMS will send events when billable activity occurs, such as shipping an order. The rule processor will receive the event, calculate a charge based on the business rules, and respond with the amount to charge.</p><h2 id="listening-for-events" tabindex="-1">Listening for Events <a class="header-anchor" href="#listening-for-events" aria-label="Permalink to &quot;Listening for Events&quot;">​</a></h2><p>First, we&#39;ll create a processor for billable events.</p><ol><li>Go to <code>&lt;your trivial url&gt;/apps/new</code></li><li>Name your app, e.g. &quot;WMS Billing Engine&quot; and hit <strong>Create</strong></li><li>Click into SendResponse and set <code>status</code> to <code>200</code></li><li>Click <strong>Save</strong></li><li>Under App Trigger, select <em>Receive Webhook</em> and hit <strong>Copy Webhook URL</strong></li></ol><p>At this stage, your rules are empty. When the app receives events, it will save the run into the diagnostics and return a <code>200: OK</code> without any further action.</p><p>Use the <em>Activity Log</em> link in the left menu to review the run.</p><h2 id="sending-events" tabindex="-1">Sending Events <a class="header-anchor" href="#sending-events" aria-label="Permalink to &quot;Sending Events&quot;">​</a></h2><p>Next, the WMS should be configured to make a POST request to the processor&#39;s webhook URL when billable activities occur. The event should have a JSON body describing the activity.</p><p>For example, a shipped order might look like:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">POST &lt;processor webhook domain&gt;/webhooks/receive</span></span></code></pre></div><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">event</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">order_shipped</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">order_id</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ABC-001</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">customer_id</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">123</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">billing_plan</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">starter</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">items</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">sku</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">456</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">quantity</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Go to <code>&lt;your trivial-url&gt;/activity</code> to verify that the processor has received the event. The JSON body you sent should be visible as <code>InitialPayload</code>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The trivial builder can send events to itself for testing. Look for the <em>App Trigger</em> section at the top of the builder and set to <em>Manual</em>. Use the <em>Edit Payload</em> button to set the data your app will be run with for the initital event.</p></div><h2 id="creating-event-rules" tabindex="-1">Creating Event Rules <a class="header-anchor" href="#creating-event-rules" aria-label="Permalink to &quot;Creating Event Rules&quot;">​</a></h2><p>Now that we have event data, we can create rules that process events differently, based on their attributes. For our example, let&#39;s assume we have two billing plans, &quot;starter&quot; and &quot;growth&quot;. We&#39;ll create two sets of rules, and sort the incoming events into the appropriate bucket.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>We use custom functions here to build an MVP quickly, but building financial calculators from out-of-the-box actions is somewhat tedious.</p><p>In a real use case, we would likely create custom actions for our users specific to calculating money. See <a href="/concepts/actions.html#creating-actions">Creating Actions</a> for more info.</p></div><ol><li>In the App Builder, click <strong>Add Action</strong></li><li>Choose <strong>If</strong> and hit <strong>Add This Action</strong></li><li>Drag the If action into the top position, then click into it.</li><li>In <em>Condition</em>, type <code>event.billing_plan == &#39;starter&#39;</code></li><li>Under <em>Then</em>, hit <strong>Add Action</strong> and choose <strong>If</strong> again.</li><li>This time, in <em>Condition</em>, enter <code>event.type == &#39;order_shipped&#39;</code></li></ol><p>Now we&#39;ve got nested logic that will only affect Order Shipped events on the Starter Plan. Our app tree should look like:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">├─ ReceiveWebhook</span></span>
<span class="line"><span style="color:#A6ACCD;">├─ If event.billing_plan is &#39;starter&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">│  ├─ If event.type is &#39;order_shipped&#39;</span></span></code></pre></div><ol start="7"><li>Create a function called <code>starterOrderShipped</code> with the following:</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">starterOrderShipped</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">initialPayload</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">charge</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">amount</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3.00</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">currency</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">USD</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">description</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">Order Shipped, </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">initialPayload</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">order_id</span><span style="color:#89DDFF;">}\`</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ol start="8"><li><p>In the <em>Then</em> section of Order Shipped, add the <strong>SendReponse</strong> action.</p></li><li><p>Click into SendResponse and set the <code>body</code> value to call your method:</p></li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">starterOrderShipped</span><span style="color:#A6ACCD;">(initialPayload)</span></span></code></pre></div><ol start="10"><li>Set status to <code>200</code> and hit <strong>Save</strong></li></ol><p>Now, if we send an event to our app, we&#39;ll get a response with the amount to charge.</p><p>Click <strong>Receive Webhook</strong> to navigate back to the root of your app, and repeat steps 2-9 to handle additional scenarios.</p>`,28),t=[l];function p(r,i,c,y,d,D){return n(),e("div",null,t)}const h=s(o,[["render",p]]);export{u as __pageData,h as default};
